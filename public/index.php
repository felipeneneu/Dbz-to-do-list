<?php

/**
 * Pense nele como o recepcionista principal da nossa casa web. Todas as visitas que n√£o s√£o diretamente para arquivos existentes (gra√ßas ao .htaccess) passam por ele primeiro. Ele decide quem vai atender o visitante (qual Controller) e o que fazer.
 * 
 */

// 'require_once __DIR__ . '/../vendor/autoload.php';' √© como dizer:
// "Primeiro, precisamos carregar todas as ferramentas e bibliotecas que nossa casa usa."
// O 'autoload.php' √© gerado pelo Composer e cuida de carregar todas as classes do nosso projeto
// e das bibliotecas que instalamos.
require_once __DIR__ . '/../vendor/autoload.php';

// 'use Core\Router\Router;' √© como dizer: "Vamos usar o 'mapa' (Router) que criamos para saber para onde direcionar as pessoas."

use App\Controllers\HomeController;
use Core\Router\Router;
// 'use Core\Exceptions\RouteNotFoundException;' √© como dizer: "Vamos tamb√©m nos preparar para o caso de algu√©m pedir um endere√ßo que n√£o existe no nosso mapa (erro de 'Rota N√£o Encontrada')."
use Core\Exceptions\RouteNotFoundException;
// 'use Core\Http\Request;' √© como dizer: "E vamos precisar de uma forma de entender o 'pedido' (Request) que o visitante fez (qual endere√ßo ele digitou, quais informa√ß√µes ele enviou, etc.)."
use Core\Http\Request;

// '$router = new Router();' √© como o recepcionista pegando o mapa para come√ßar a trabalhar.
$router = new Router();

// 'include_once __DIR__ . '/../app/routes/web.php';' √© como o recepcionista abrindo o livro de rotas
// (o arquivo 'web.php' na pasta 'app/routes') para ver todos os endere√ßos poss√≠veis e quem cuida de cada um.
include_once __DIR__ . '/../app/routes/web.php';

// '$request = new Request();' √© o recepcionista olhando para o 'pedido' (a requisi√ß√£o) que acabou de chegar.
// Ele est√° pegando informa√ß√µes como a URL que o visitante digitou, o m√©todo (se foi para ver a p√°gina ou enviar algo), etc.
$request = new Request();

// 'try { ... } catch (...) { ... }' √© como o recepcionista tentando encontrar o caminho certo
// e se preparando para lidar com problemas.
try {
    // 'echo $router->resolve($request);' √© a parte principal!
    // O recepcionista (Router) pega o 'pedido' (Request) e usa o 'mapa' (rotas em 'web.php')
    // para descobrir qual "gerente" (Controller) deve atender o visitante e qual "tarefa" (m√©todo) esse gerente deve fazer.
    // A fun√ß√£o 'resolve()' faz isso e retorna a resposta (geralmente o HTML da p√°gina) que deve ser mostrada para o visitante.
    // O 'echo' ent√£o envia essa resposta para o navegador do visitante.
    echo $router->resolve($request);
} catch (RouteNotFoundException $e) {
    // 'http_response_code(404);' √© o que acontece se o recepcionista n√£o encontrar o endere√ßo no mapa.
    // Ele envia um c√≥digo de erro 404 ("P√°gina N√£o Encontrada") para o navegador.
    http_response_code(404);
    // 'echo 'Erro 404: P√°gina n√£o encontrada.';' e tamb√©m mostra uma mensagem amig√°vel de erro.
    require_once __DIR__ . '../../app/Views/404.php';
    echo 'Erro 404: P√°gina n√£o encontrada.';
} catch (Exception $e) {
    // 'http_response_code(500);' √© o que acontece se algo der errado dentro da nossa casa (um erro no c√≥digo).
    // Ele envia um c√≥digo de erro 500 ("Erro Interno do Servidor").
    http_response_code(500);
    // 'echo 'Erro interno: ' . $e->getMessage();' e mostra uma mensagem de erro mais t√©cnica para ajudar a entender o problema.
    echo 'Erro interno: ' . $e->getMessage();
}

/**Em resumo sobre o index.php:

√â o ponto de entrada principal para todas as requisi√ß√µes web que n√£o s√£o arquivos est√°ticos.
Ele carrega as configura√ß√µes e as classes necess√°rias.
Ele inicializa o sistema de roteamento.
Ele inclui as defini√ß√µes de rotas do arquivo web.php.
Ele cria um objeto de requisi√ß√£o para entender o que o usu√°rio pediu.
Ele usa o roteador para encontrar a rota correspondente √† requisi√ß√£o e executar o Controller e o m√©todo corretos.
Ele envia a resposta gerada de volta para o navegador do usu√°rio.
Ele tamb√©m lida com erros como "P√°gina N√£o Encontrada" e erros internos do servidor.
Para dar sequ√™ncia aqui:

Implementar a Classe Router (em Core\Router\Router): Voc√™ precisar√° criar a classe Router que tem a l√≥gica para adicionar rotas (como fazemos no web.php) e para encontrar a rota correspondente a uma URL e executar o Controller e o m√©todo associados. Essa classe precisar√° analisar a URL da requisi√ß√£o e compar√°-la com as rotas definidas.

Implementar a Classe Request (em Core\Http\Request): Voc√™ precisar√° criar a classe Request que ajuda a obter informa√ß√µes sobre a requisi√ß√£o do usu√°rio, como a URL, o m√©todo HTTP (GET, POST, etc.), os par√¢metros da URL, os dados de formul√°rio, etc.

Criar a Estrutura de Pastas Core\Router e Core\Http: Como estamos usando use Core\Router\Router; e use Core\Http\Request;, voc√™ precisar√° criar uma pasta chamada Core dentro da pasta principal do seu projeto (onde est√£o app, public, src, etc.) e dentro dela criar as subpastas Router e Http para colocar essas classes.

O index.php √© o maestro que coordena todo o processo de receber um pedido do usu√°rio e entregar a resposta! Pr√≥ximo passo: quer dar uma olhada em como essas classes Router e Request poderiam ser implementadas (mesmo que de forma bem b√°sica)? üòä */
